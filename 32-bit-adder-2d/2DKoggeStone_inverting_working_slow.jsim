.include "C:\Users\Joel\Desktop\jsim\50002\nominal.jsim"
.include "C:\Users\Joel\Desktop\jsim\50002\stdcell.jsim"
.include "C:\Users\Joel\Desktop\jsim\50002\2dcheckoff_3ns.jsim"

* Precomp portion returns ~G and ~P
.subckt precomp A B invG invP
Xprecompnand A B invG nand2
Xprecompxnor A B invP xnor2
.ends

.subckt precompn pA pB pP pG
Xprecompand pA pB pG and2
Xprecompxor pA pB pP xor2
.ends

* Inverting black cells happen on odd row stages (1,3,5)
* TAKES IN INVERTED G, P, RETURNS G, P
.subckt invblack notGi notPi notGj notPj G P
XIB_or notPi notGj 1 or2
XIB_nand 1 notGi G nand2
XIB_nor notPi notPj P nor2
.ends

* Normal black cells happen on even row stages (2,4)
* TAKES IN G, P, REUTRNS INVERTED G, P
.subckt black Gi Pi Gj Pj notG notP
XB_inv Gi invGi inverter
XB_nand Pi Gj 1 nand2
XB_and invGi 1 notG and2
XB_nand2 Pi Pj notP nand2
.ends

* Inverting grey cells happen on odd row stages
.subckt invgrey notGi notPi notGj G
XIG_or notPi notGj 1 or2
XIG_nand 1 notGi G nand2
.ends

* Normal grey cells happen on even row stages
.subckt grey Gi Pi Gj notG
XG_inv Gi invGi inverter
XG_nand Pi Gj 1 nand2
XG_and invGi 1 notG and2
.ends


.subckt merge X Y
Xbf X Y buffer_2
.ends

.subckt adder32 ALUFN A[31:0] B[31:0] S[31:0] Z V N

XinvB B[31:0] Bi[31:0] inverter
XselB ALUFN#32 B[31:0] Bi[31:0] XB[31:0] mux2

* Generate ~P and ~G for each bit
Xprecompute A[31:1] XB[31:1] notG[31:1] notP[31:1] precomp

Xpng0 A[0] XB[0] P[0] preG precompn
Xprep preG P[0] ALUFN notG[0] grey
Xpin P[0] notP[0] inverter

XStage1conn notG[0] S5G[0] inverter
* Pass G[1], P[1], and G[0] to Stage 1's G[1]
XStage1G notG[1] notP[1] notG[0] S1G[1] invgrey
* Replace precomp and grey block 1

* Pass G[31:2], P[31:2], G[30:1], and P[30:1] to Stage 1's G[31:2] and P[31:2]
* (Since the rest of the cells are black)
XStage1B notG[31:2] notP[31:2] notG[30:1] notP[30:1] S1G[31:2] S1P[31:2] invblack

* Stage 2
* Pass Stage 1's G[1:0] to Stage 2's G[1:0]
XStage2conn S1G[1] S5G[1] merge

* Pass Stage 1's (G[3], P[3], G[1]) to Stage 2's G[3],
* and Stage 1's (G[2], P[2], G[0]) to Stage 2's G[2]
XStage2Ginvert notG[0] G[0] inverter
XStage2G0 S1G[2] S1P[2] G[0] S2G[2] grey
XStage2G S1G[3] S1P[3] S1G[1] S2G[3] grey

* Pass Stage 1's G[31:4] and P[31:4] as Gi, Pi arguments
* Pass Stage 1's G[29:2] and P[29:2] as Gj, Pj arguments
* Return Stage 2's G[31:4] and P[31:4]
XStage2B S1G[31:4] S1P[31:4] S1G[29:2] S1P[29:2] S2G[31:4] S2P[31:4] black

* Similar logic follows for Stage 3, 4 and 5.

* Stage 3
XStage3conn S2G[3:2] S5G[3:2] inverter

XStage3Ginvert S1G[1] S1Ginv inverter

XStage3G4 S2G[4] S2P[4] notG[0] S3G[4] invgrey
XStage3G5 S2G[5] S2P[5] S1Ginv S3G[5] invgrey
XStage3G S2G[7:6] S2P[7:6] S2G[3:2] S3G[7:6] invgrey
XStage3B S2G[31:8] S2P[31:8] S2G[27:4] S2P[27:4] S3G[31:8] S3P[31:8] invblack

* Stage 4
XStage4conn S3G[7:4] S5G[7:4] merge

XStage4Ginvert2 S2G[3:2] S2Ginv[3:2] inverter

XStage4G0 S3G[8] S3P[8] G[0] S4G[8] grey
XStage4G1 S3G[9] S3P[9] S1G[1] S4G[9] grey
XStage4G2 S3G[10] S3P[10] S2Ginv[2] S4G[10] grey
XStage4G3 S3G[11] S3P[11] S2Ginv[3] S4G[11] grey
XStage4G S3G[15:12] S3P[15:12] S3G[7:4] S4G[15:12] grey
XStage4B S3G[31:16] S3P[31:16] S3G[23:8] S3P[23:8] S4G[31:16] S4P[31:16] black

* Stage 5
XStage5conn S4G[15:8] S5G[15:8] inverter 

XStage5Ginvert2 S3G[7:4] S3Ginv[7:4] inverter

XStage5G0 S4G[16] S4P[16] notG[0] S5G[16] invgrey
XStage5G1 S4G[17] S4P[17] S1Ginv S5G[17] invgrey
XStage5G2 S4G[19:18] S4P[19:18] S2G[3:2] S5G[19:18] invgrey
XStage5G3 S4G[23:20] S4P[23:20] S3Ginv[7:4] S5G[23:20] invgrey
XStage5G4 S4G[31:24] S4P[31:24] S4G[15:8] S5G[31:24] invgrey

Xsuminv0 notP[31:1] P[31:1] inverter

Xsum0 P[0] ALUFN S[0] xor2
Xsum P[31:1] S5G[30:0] S[31:1] xor2

* Z signal
XZorCascade S[7:0] S[15:8] S[23:16] S[31:24] w[7:0] nor4
X4AndCascade w[7:6] w[5:4] w[3:2] w[1:0] int[1:0] nand4
XFinalZ int1 int0 Z nor2

* V signal
XnotS31 S[31] ns31 inverter
XnotA31 A[31] na31 inverter
XnotXB31 XB[31] nxb31 inverter
XVckt1 A[31] XB[31] ns31 vp1 nand3
XVckt2 na31 nxb31 S[31] vp2 nand3
XVckt vp1 vp2 V nand2

* N signal
.connect S[31] N

.ends